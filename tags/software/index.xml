<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software on Sebastian Brunner</title>
    <link>https://sebastian-brunner.github.io/tags/software/</link>
    <description>Recent content in Software on Sebastian Brunner</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 10 Jul 2018 00:00:00 +0000</lastBuildDate>
    
	    <atom:link href="https://sebastian-brunner.github.io/tags/software/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>RAFCON</title>
      <link>https://sebastian-brunner.github.io/project/rafcon/</link>
      <pubDate>Tue, 10 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://sebastian-brunner.github.io/project/rafcon/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Bundle Adjustment on FPGAs</title>
      <link>https://sebastian-brunner.github.io/project/master-thesis/</link>
      <pubDate>Mon, 31 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sebastian-brunner.github.io/project/master-thesis/</guid>
      <description>&lt;p&gt;My master thesis gives a detailed insight into bundle adjustment as a powerful tool for globally optimizing maps created by feature based simultaneous localization and mapping (SLAM). Background knowledge, especially concerning the mathematical theory, is be illustrated clearly. Different problems affecting robustness and efficiency are examined and solutions are given. Therefore a major part focuses on the parallel implementation in OpenCL, a language for parallelizing algorithms for different processor architectures like CPUs, GPUs and FPGAs. The algorithm is tested against different synthetic and real datasets and the results are shown graphically using Point Clouds and the CVT library. In addition, different implementations are compared with each other concerning robustness and performance. It is illustrated that a hybrid OpenCL bundle adjustment implementation, which is using a GPU and a CPU simultaneously, outperforms all other approaches.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>NLCT</title>
      <link>https://sebastian-brunner.github.io/project/nlct/</link>
      <pubDate>Mon, 10 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sebastian-brunner.github.io/project/nlct/</guid>
      <description>&lt;p&gt;NLCT is a lightweight library written in C++ to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;convert the covariance matrices for poses between different representations: Quaternions, Euler Angle (both fixed and moving frames)&lt;/li&gt;
&lt;li&gt;compute the composition of multiple certain and uncertain poses&lt;/li&gt;
&lt;li&gt;transform the covariance of a pose from one coordinate frame into another&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For all functions the user can choose the computation method: UNSCENTED, JACOBIAN, SAMPLING. The computation methods are a trade-off between accuracy and computation speed. The library includes functions for normalization, representation conversions and pose transformations (like composition, inversion etc.).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Semantic World Model</title>
      <link>https://sebastian-brunner.github.io/project/world_model/</link>
      <pubDate>Mon, 10 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sebastian-brunner.github.io/project/world_model/</guid>
      <description>&lt;p&gt;The world model is implemented using the graph database Neo4j (&lt;a href=&#34;https://neo4j.com/&#34; target=&#34;_blank&#34;&gt;https://neo4j.com/&lt;/a&gt;) as backend.
Neo4j represents data using a property-graph model, meaning the database is a graph composed of nodes and interconnected by edges, both of which can store arbitrary properties in a key-value fashion.
For our world model, we directly represent objects in the world model as nodes in the database graph and correspondingly edges in the graph build up the world model tree structure.
The relative position and orientation between two objects are stored as properties of the connecting edge.
We define and ensure a common type-system for objects in the world, by defining a type-hierarchy with precisely listed required and optional properties for each object type (e.g. every PhysicalObject has to have a mass; every Grasp a width and force).&lt;/p&gt;

&lt;p&gt;A database as backend in general provides useful features to keep the world model consistent at any time, e.g. synchronized multi-client read-/write-access and transaction support for batching multiple modifications into an atomic operation.
In particular, we use transactions with pre-/post-transaction sanity checks to allow complex yet safe operations on the world model. In case of a software error or violated sanity checks (e.g. a world model object suddenly has two parents), the world model is automatically rolled back to the consistent state before this modification.
As a graph database, Neo4j offers a pattern-related query language called \textit{CYPHER}, which makes it very easy to query the world model for e.g. &amp;ldquo;all rigid bodies for which a grasp is defined.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;We use YAML-files as a human read-/writeable way to specify the initial world model, but also complex object templates (e.g. complete subgraphs of PhysicalObjects together with attached Grasps and Markers, etc.). To add such templates into the world model, we developed a domain-specific module and API for higher level operations based on the raw CYPHER-access to the database.
Other more complex operations include querying the relative transformation between arbitrary objects in the graph or maintaining unique labels for nodes. This API is the basis for several adapter modules which make operations accessible via ROS services. New functionality or composite operations can be added in a modular way by writing additional adapters as necessary.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
